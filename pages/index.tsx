import {
  Heading,
  Text,
  Box,
  Grid,
  Spinner,
  Center,
  Flex,
  Button,
  useToast,
} from "@chakra-ui/react";
import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import { AlertComponent } from "../components/AlertComponent";
import { PokeCard } from "../components/PokeCard";
import { PokeTeamItem } from "../components/PokeTeamItem";
import { SearchForPoke } from "../components/SearchForPoke";
import { UserDefinedPoke } from "../components/UserDefinedPoke";
import { YourPocket } from "../components/YourPocket";
import { getSpecificPoke } from "../utils/getPokemon";
import { useLocalStorage } from "../utils/useLocalStorage";

export default function Home() {
  // TODO CLEANUP A BIT HUH
  const BASE_URL = "https://pokeapi.co/api/v2";
  const [userPokes, setUserPokes] = useState([]);
  const [pokemonData, setPokemonData] = useState(null);
  const [waiting, setWating] = useState<boolean>(false);
  const [userPokeData, setUserPokeData] = useState(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [error, setError] = useState(false);
  const toast = useToast();

  const [storedUserTeam, setStoredUserTeam] = useLocalStorage(
    "userPokemons",
    []
  );

  const addToUserPocket = (pokemon) => {
    let newPoke = pokemon;
    let err2 = 0;
    pokemon === null || (pokemon === undefined && err2++);
    storedUserTeam.length === 6 && err2++;

    storedUserTeam.forEach((e) => {
      e.id === newPoke.id ? err2++ : console.log("alright");
    });

    // err2 === 0 && setUserPokes((prev) => [...prev, newPoke]);
    err2 === 0 && setStoredUserTeam([...storedUserTeam, newPoke]);
    err2 === 0 &&
      toast({
        title: "Pokemon added to your team!",
        status: "success",
        duration: 2000,
        isClosable: true,
      });
    err2 > 0 &&
      err2 < 2 &&
      toast({
        title: "You already have this Pokemon",
        status: "error",
        duration: 1500,
        isClosable: true,
      });
    if (err2 >= 2) {
      console.log(err2);
      toast({
        title: "Limit Reached ",
        status: "warning",
        duration: 1500,
      });
      return;
    }
    console.log(storedUserTeam.length);
  };

  /*
   * Get random poke
   */
  const generateRandomPoke = (s, f) => {
    setWating(true);
    const number = Math.floor(Math.random() * (f - s)) + s;
    try {
      fetch(`${BASE_URL}/pokemon/${number}`)
        .then((res) => res.json())
        .then((res) => {
          setWating(false);
          setPokemonData(res);
          console.log(res);
        });
      setWating(false);
    } catch (err) {
      console.log(err);
    }
  };
  // -------------------------------------------------

  const fetchThePoke = async (query: string) => {
    try {
      if (query.length === 0 || query === undefined || query === null) {
        alert("please enter a search param");
        return;
      }
      (query === "" || undefined) && alert("Please enter your search");

      const userPokeData = await getSpecificPoke(query);
      setUserPokeData(userPokeData);
      console.log(userPokeData);
    } catch (err) {
      console.log(err);
      alert("This pokemon does not exist");
    }
  };

  // -------------------------------------------------
  useEffect(() => {
    generateRandomPoke(1, 898);
  }, []);

  return (
    <div>
      <Head>
        <title>PokeYS App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Grid placeItems="center" gap={10} mx={20}>
        <Box rounded="lg" bg="white" shadow="2xl" p={5}>
          <Heading
            bgGradient="linear(to-l, #7928CA,#FF0080)"
            bgClip="text"
            fontSize="6xl"
            fontWeight="extrabold"
            textAlign="center"
          >
            Welcome to the Poke App
          </Heading>

          {/* User Team Component */}
          <YourPocket
            fnSetPokes={setStoredUserTeam}
            dataUserPokes={storedUserTeam}
          />
        </Box>
        <Button
          colorScheme="telegram"
          onClick={() => {
            generateRandomPoke(1, 898);
          }}
        >
          Generate New poke without refreshing the page!
        </Button>

        <SearchForPoke
          getPoKemonName={fetchThePoke}
          pokemonData={userPokeData}
          addToUserTeam={addToUserPocket}
          setterFn={() => {
            setUserPokeData([]);
          }}
        />

        {/* Waiting spinner */}
        {waiting && (
          <Center mt={20}>
            <Spinner size="xl" />
          </Center>
        )}
        {/* User Poke Card showing */}
        {userPokeData && <UserDefinedPoke poke={userPokeData} />}
        {/* Showing the Card */}
        {!waiting && pokemonData && (
          <PokeCard
            addToTeam={addToUserPocket}
            setFn={setStoredUserTeam}
            userPokes={storedUserTeam}
            pokemonData={pokemonData}
          />
        )}
      </Grid>
    </div>
  );
}
